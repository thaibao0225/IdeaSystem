// <auto-generated />
using System;
using IdeaSystem.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IdeaSystem.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("IdeaSystem.Entities.Category", b =>
                {
                    b.Property<string>("category_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("category_IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("category_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("category_Id");

                    b.ToTable("Category", (string)null);

                    b.HasData(
                        new
                        {
                            category_Id = "9508e71d-669d-455b-ad36-f2a83e424039",
                            category_IsDelete = false,
                            category_Name = "Category1"
                        },
                        new
                        {
                            category_Id = "cff5e2e0-a4c9-4c67-ba40-4da1c2dd7cf1",
                            category_IsDelete = false,
                            category_Name = "Category2"
                        });
                });

            modelBuilder.Entity("IdeaSystem.Entities.Comment", b =>
                {
                    b.Property<string>("cmt_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("cmt_Datetime")
                        .HasColumnType("datetime2");

                    b.Property<string>("cmt_IdeaId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("cmt_IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("cmt_Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cmt_UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("cmt_Id");

                    b.HasIndex("cmt_IdeaId");

                    b.HasIndex("cmt_UserId");

                    b.ToTable("Comment", (string)null);

                    b.HasData(
                        new
                        {
                            cmt_Id = "f925b22b-0513-4a81-ac91-7c80fdcd22f0",
                            cmt_Datetime = new DateTime(2020, 1, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            cmt_IdeaId = "486a781b-066c-4e0a-b9c1-e31f7888391e",
                            cmt_IsDelete = false,
                            cmt_Text = "Commnet 1",
                            cmt_UserId = "faaf8942-df50-4b17-b3f8-939c7e03ffe8"
                        },
                        new
                        {
                            cmt_Id = "40987a54-2bb6-4c53-8d0e-7c73907c5760",
                            cmt_Datetime = new DateTime(2020, 1, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            cmt_IdeaId = "e4512814-41a7-4724-ba67-877c4f1a137e",
                            cmt_IsDelete = false,
                            cmt_Text = "Commnet 2",
                            cmt_UserId = "faaf8942-df50-4b17-b3f8-939c7e03ffe8"
                        });
                });

            modelBuilder.Entity("IdeaSystem.Entities.Department", b =>
                {
                    b.Property<string>("department_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("department_IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("department_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("department_Id");

                    b.ToTable("Department", (string)null);

                    b.HasData(
                        new
                        {
                            department_Id = "10366241-bd1e-45e0-a34b-45ef9cb0cee2",
                            department_IsDelete = false,
                            department_Name = "NameDepartment1"
                        },
                        new
                        {
                            department_Id = "b021b595-1842-490d-93b9-2b4773ce2eab",
                            department_IsDelete = false,
                            department_Name = "NameDepartment2"
                        },
                        new
                        {
                            department_Id = "e79b30ca-143b-424d-b896-69328baa46db",
                            department_IsDelete = false,
                            department_Name = "NameDepartment3"
                        });
                });

            modelBuilder.Entity("IdeaSystem.Entities.Idea", b =>
                {
                    b.Property<string>("idea_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("idea_Agree")
                        .HasColumnType("bit");

                    b.Property<string>("idea_CategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("idea_DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("idea_FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("idea_FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("idea_IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("idea_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("idea_Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("idea_TopicId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("idea_UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("idea_Id");

                    b.HasIndex("idea_CategoryId");

                    b.HasIndex("idea_TopicId");

                    b.HasIndex("idea_UserId");

                    b.ToTable("Idea", (string)null);

                    b.HasData(
                        new
                        {
                            idea_Id = "486a781b-066c-4e0a-b9c1-e31f7888391e",
                            idea_Agree = false,
                            idea_CategoryId = "9508e71d-669d-455b-ad36-f2a83e424039",
                            idea_DateTime = new DateTime(2020, 1, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            idea_FileName = "FilePath1",
                            idea_FilePath = "FilePath1",
                            idea_IsDelete = false,
                            idea_Name = "Idea 1",
                            idea_Text = "Idea 1",
                            idea_TopicId = "f84c8b6e-6692-4f95-a547-ddb98b17bd6d",
                            idea_UserId = "faaf8942-df50-4b17-b3f8-939c7e03ffe8"
                        },
                        new
                        {
                            idea_Id = "fa695188-522a-4aed-a82b-f348673913a9",
                            idea_Agree = false,
                            idea_CategoryId = "cff5e2e0-a4c9-4c67-ba40-4da1c2dd7cf1",
                            idea_DateTime = new DateTime(2020, 1, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            idea_FileName = "FilePath2",
                            idea_FilePath = "FilePath2",
                            idea_IsDelete = false,
                            idea_Name = "Idea 2",
                            idea_Text = "Idea 2",
                            idea_TopicId = "d8f144f1-709a-4e38-a4ce-12b84be56445",
                            idea_UserId = "faaf8942-df50-4b17-b3f8-939c7e03ffe8"
                        },
                        new
                        {
                            idea_Id = "e4512814-41a7-4724-ba67-877c4f1a137e",
                            idea_Agree = false,
                            idea_CategoryId = "cff5e2e0-a4c9-4c67-ba40-4da1c2dd7cf1",
                            idea_DateTime = new DateTime(2020, 1, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            idea_FileName = "FilePath3",
                            idea_FilePath = "FilePath3",
                            idea_IsDelete = false,
                            idea_Name = "Idea 3",
                            idea_Text = "Idea 3",
                            idea_TopicId = "f84c8b6e-6692-4f95-a547-ddb98b17bd6d",
                            idea_UserId = "c63325a5-52b0-4624-a823-41e5c097cedd"
                        });
                });

            modelBuilder.Entity("IdeaSystem.Entities.React", b =>
                {
                    b.Property<string>("react_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("react_IdeadId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("react_React")
                        .HasColumnType("int");

                    b.Property<string>("react_UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("react_Id");

                    b.HasIndex("react_IdeadId");

                    b.HasIndex("react_UserId");

                    b.ToTable("React", (string)null);

                    b.HasData(
                        new
                        {
                            react_Id = "a500ed55-14fc-4fba-a7fa-55cf1675376d",
                            react_IdeadId = "486a781b-066c-4e0a-b9c1-e31f7888391e",
                            react_React = -1,
                            react_UserId = "faaf8942-df50-4b17-b3f8-939c7e03ffe8"
                        },
                        new
                        {
                            react_Id = "5d5e6537-91a8-43ae-8063-1b22b886e11c",
                            react_IdeadId = "e4512814-41a7-4724-ba67-877c4f1a137e",
                            react_React = -1,
                            react_UserId = "c63325a5-52b0-4624-a823-41e5c097cedd"
                        },
                        new
                        {
                            react_Id = "6005a9ca-d652-4813-8ef2-1fa0d0d2de44",
                            react_IdeadId = "486a781b-066c-4e0a-b9c1-e31f7888391e",
                            react_React = 1,
                            react_UserId = "c63325a5-52b0-4624-a823-41e5c097cedd"
                        },
                        new
                        {
                            react_Id = "24ade95e-3783-4730-915d-af18157ad585",
                            react_IdeadId = "fa695188-522a-4aed-a82b-f348673913a9",
                            react_React = 1,
                            react_UserId = "c63325a5-52b0-4624-a823-41e5c097cedd"
                        });
                });

            modelBuilder.Entity("IdeaSystem.Entities.Topic", b =>
                {
                    b.Property<string>("topic_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("topic_ClosureDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("topic_FinalClosureDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("topic_IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("topic_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("topic_Id");

                    b.ToTable("Topic", (string)null);

                    b.HasData(
                        new
                        {
                            topic_Id = "f84c8b6e-6692-4f95-a547-ddb98b17bd6d",
                            topic_ClosureDate = new DateTime(2020, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            topic_FinalClosureDate = new DateTime(2020, 1, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            topic_IsDelete = false,
                            topic_Name = "Topic 1"
                        },
                        new
                        {
                            topic_Id = "d8f144f1-709a-4e38-a4ce-12b84be56445",
                            topic_ClosureDate = new DateTime(2020, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            topic_FinalClosureDate = new DateTime(2020, 1, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            topic_IsDelete = false,
                            topic_Name = "Topic 2"
                        },
                        new
                        {
                            topic_Id = "c283b083-0a18-4467-abb9-3ea0b4d64cf7",
                            topic_ClosureDate = new DateTime(2020, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            topic_FinalClosureDate = new DateTime(2020, 1, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            topic_IsDelete = false,
                            topic_Name = "Topic 3"
                        },
                        new
                        {
                            topic_Id = "b0f1679b-8604-48e8-ba49-31d27d6a4f66",
                            topic_ClosureDate = new DateTime(2020, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            topic_FinalClosureDate = new DateTime(2020, 1, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            topic_IsDelete = false,
                            topic_Name = "Topic 4"
                        },
                        new
                        {
                            topic_Id = "2649749b-a968-4f8d-9f0f-6a0afd785455",
                            topic_ClosureDate = new DateTime(2020, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            topic_FinalClosureDate = new DateTime(2020, 1, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            topic_IsDelete = false,
                            topic_Name = "Topic 5"
                        });
                });

            modelBuilder.Entity("IdeaSystem.Entities.View", b =>
                {
                    b.Property<string>("view_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("view_IdeadId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("view_UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("view_VisitTime")
                        .HasColumnType("int");

                    b.HasKey("view_Id");

                    b.HasIndex("view_IdeadId");

                    b.HasIndex("view_UserId");

                    b.ToTable("View", (string)null);

                    b.HasData(
                        new
                        {
                            view_Id = "2fc9b539-afb7-44aa-acd4-588ac8cabccc",
                            view_IdeadId = "486a781b-066c-4e0a-b9c1-e31f7888391e",
                            view_UserId = "faaf8942-df50-4b17-b3f8-939c7e03ffe8",
                            view_VisitTime = 1
                        },
                        new
                        {
                            view_Id = "abb04dac-2710-451d-80bc-bb64ddeab556",
                            view_IdeadId = "e4512814-41a7-4724-ba67-877c4f1a137e",
                            view_UserId = "c63325a5-52b0-4624-a823-41e5c097cedd",
                            view_VisitTime = 1
                        },
                        new
                        {
                            view_Id = "90541aa0-d004-448a-94c6-f7d5e6c97824",
                            view_IdeadId = "486a781b-066c-4e0a-b9c1-e31f7888391e",
                            view_UserId = "c63325a5-52b0-4624-a823-41e5c097cedd",
                            view_VisitTime = 1
                        },
                        new
                        {
                            view_Id = "67be34c7-cb54-4d6c-b71b-4aa27627a17b",
                            view_IdeadId = "fa695188-522a-4aed-a82b-f348673913a9",
                            view_UserId = "c63325a5-52b0-4624-a823-41e5c097cedd",
                            view_VisitTime = 1
                        });
                });

            modelBuilder.Entity("IdeaSystem.Models.UserModel", b =>
                {
                    b.Property<string>("user_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("user_IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("user_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_RoleIdNew")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("user_Id");

                    b.ToTable("UserModel");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "faaf8942-df50-4b17-b3f8-939c7e03ffe8",
                            RoleId = "8B6B7FA7-220D-427F-AF15-57DE6EF686C6"
                        },
                        new
                        {
                            UserId = "c63325a5-52b0-4624-a823-41e5c097cedd",
                            RoleId = "23628387-4AD3-4A03-993B-1ECF0F030CB3"
                        },
                        new
                        {
                            UserId = "d76e1c03-fead-4df4-966c-4b3b62b27a57",
                            RoleId = "06c62f70-7860-493d-8c74-648a5360883e"
                        },
                        new
                        {
                            UserId = "dd28b735-4f61-46bf-be98-02c02ee27cee",
                            RoleId = "8B6B7FA7-220D-427F-AF15-57DE6EF686C6"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("IdeaSystem.Entities.Role", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.Property<bool>("role_IsDelete")
                        .HasColumnType("bit");

                    b.ToTable("Roles");

                    b.HasDiscriminator().HasValue("Role");

                    b.HasData(
                        new
                        {
                            Id = "8B6B7FA7-220D-427F-AF15-57DE6EF686C6",
                            ConcurrencyStamp = "8d5e3fa0-9abc-4d25-9284-ba2495290d5d",
                            Name = "Staff",
                            NormalizedName = "staff",
                            role_IsDelete = false
                        },
                        new
                        {
                            Id = "23628387-4AD3-4A03-993B-1ECF0F030CB3",
                            ConcurrencyStamp = "a0d75844-ad22-42d8-bc16-ec505532e25e",
                            Name = "Admin",
                            NormalizedName = "admin",
                            role_IsDelete = false
                        },
                        new
                        {
                            Id = "06c62f70-7860-493d-8c74-648a5360883e",
                            ConcurrencyStamp = "aee65bcc-747b-4857-a147-03eab1e5dc14",
                            Name = "Qa",
                            NormalizedName = "qa",
                            role_IsDelete = false
                        });
                });

            modelBuilder.Entity("IdeaSystem.Entities.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("user_DepartmentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("user_DepartmentId");

                    b.ToTable("Users");

                    b.HasDiscriminator().HasValue("User");

                    b.HasData(
                        new
                        {
                            Id = "c63325a5-52b0-4624-a823-41e5c097cedd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4a6d0f69-5f91-40e3-8c15-f70c051532fc",
                            Email = "admin@testgmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@TESTGMAIL.COM",
                            NormalizedUserName = "ADMIN@TESTGMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAif7ToLlHTnCzISoBSSo++i+BOEA8HMZNxnAh8NiD6xX933Ml4OEc7lgGvRPKy3Ug==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c7603986-a817-4277-a9e5-f41eca2290bc",
                            TwoFactorEnabled = false,
                            UserName = "admin@testgmail.com",
                            user_DepartmentId = "10366241-bd1e-45e0-a34b-45ef9cb0cee2"
                        },
                        new
                        {
                            Id = "faaf8942-df50-4b17-b3f8-939c7e03ffe8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dfe228e8-0f1c-4604-b113-6ed04bdbc2e8",
                            Email = "staff@testgmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STAFF@TESTGMAIL.COM",
                            NormalizedUserName = "STAFF@TESTGMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJwqfE92lJsjx0ZplIpPvTrBLHlxjTYwnBESOZKNCI/9rr751QLHCczTFCZzmU2Tog==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "81a11dc9-f428-4b51-b1ba-147422ec418f",
                            TwoFactorEnabled = false,
                            UserName = "staff@testgmail.com",
                            user_DepartmentId = "b021b595-1842-490d-93b9-2b4773ce2eab"
                        },
                        new
                        {
                            Id = "d76e1c03-fead-4df4-966c-4b3b62b27a57",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9f8f86ae-6258-41cf-a8dc-82f61c27dcde",
                            Email = "qa@testgmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "QA@TESTGMAIL.COM",
                            NormalizedUserName = "QA@TESTGMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENGnu8AMNMtS9A7dWr+JEdAuGtDOu9xPSXfOKWOmUwfiHDH+6L4XVVj1jWAa1/PpEw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b16a0458-0e0b-4f49-901f-f93e462248fe",
                            TwoFactorEnabled = false,
                            UserName = "qa@testgmail.com",
                            user_DepartmentId = "b021b595-1842-490d-93b9-2b4773ce2eab"
                        },
                        new
                        {
                            Id = "dd28b735-4f61-46bf-be98-02c02ee27cee",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e43e17d0-5989-4f75-94fa-01abf84a225a",
                            Email = "staff2@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STAFF2@TESTGMAIL.COM",
                            NormalizedUserName = "STAFF2@TESTGMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPdiyYB+12Xws+kE31LUaXW16Ax3fa0ZVLVoc5fxisRPX76MPXd1XkVxNTN1lK4aHw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6324a4dd-63c0-4255-a47d-179d067d39da",
                            TwoFactorEnabled = false,
                            UserName = "staff2@testgmail.com",
                            user_DepartmentId = "b021b595-1842-490d-93b9-2b4773ce2eab"
                        });
                });

            modelBuilder.Entity("IdeaSystem.Entities.Comment", b =>
                {
                    b.HasOne("IdeaSystem.Entities.Idea", "Idea")
                        .WithMany("commentList")
                        .HasForeignKey("cmt_IdeaId")
                        .IsRequired();

                    b.HasOne("IdeaSystem.Entities.User", "users")
                        .WithMany("commentList")
                        .HasForeignKey("cmt_UserId")
                        .IsRequired();

                    b.Navigation("Idea");

                    b.Navigation("users");
                });

            modelBuilder.Entity("IdeaSystem.Entities.Idea", b =>
                {
                    b.HasOne("IdeaSystem.Entities.Category", "category")
                        .WithMany("ideaList")
                        .HasForeignKey("idea_CategoryId")
                        .IsRequired();

                    b.HasOne("IdeaSystem.Entities.Topic", "topic")
                        .WithMany("ideaList")
                        .HasForeignKey("idea_TopicId")
                        .IsRequired();

                    b.HasOne("IdeaSystem.Entities.User", "users")
                        .WithMany("ideaList")
                        .HasForeignKey("idea_UserId")
                        .IsRequired();

                    b.Navigation("category");

                    b.Navigation("topic");

                    b.Navigation("users");
                });

            modelBuilder.Entity("IdeaSystem.Entities.React", b =>
                {
                    b.HasOne("IdeaSystem.Entities.Idea", "Idea")
                        .WithMany("reactList")
                        .HasForeignKey("react_IdeadId")
                        .IsRequired();

                    b.HasOne("IdeaSystem.Entities.User", "users")
                        .WithMany("reactList")
                        .HasForeignKey("react_UserId")
                        .IsRequired();

                    b.Navigation("Idea");

                    b.Navigation("users");
                });

            modelBuilder.Entity("IdeaSystem.Entities.View", b =>
                {
                    b.HasOne("IdeaSystem.Entities.Idea", "Idea")
                        .WithMany("viewList")
                        .HasForeignKey("view_IdeadId")
                        .IsRequired();

                    b.HasOne("IdeaSystem.Entities.User", "users")
                        .WithMany("viewList")
                        .HasForeignKey("view_UserId")
                        .IsRequired();

                    b.Navigation("Idea");

                    b.Navigation("users");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IdeaSystem.Entities.User", b =>
                {
                    b.HasOne("IdeaSystem.Entities.Department", "user_Department")
                        .WithMany("userList")
                        .HasForeignKey("user_DepartmentId")
                        .IsRequired();

                    b.Navigation("user_Department");
                });

            modelBuilder.Entity("IdeaSystem.Entities.Category", b =>
                {
                    b.Navigation("ideaList");
                });

            modelBuilder.Entity("IdeaSystem.Entities.Department", b =>
                {
                    b.Navigation("userList");
                });

            modelBuilder.Entity("IdeaSystem.Entities.Idea", b =>
                {
                    b.Navigation("commentList");

                    b.Navigation("reactList");

                    b.Navigation("viewList");
                });

            modelBuilder.Entity("IdeaSystem.Entities.Topic", b =>
                {
                    b.Navigation("ideaList");
                });

            modelBuilder.Entity("IdeaSystem.Entities.User", b =>
                {
                    b.Navigation("commentList");

                    b.Navigation("ideaList");

                    b.Navigation("reactList");

                    b.Navigation("viewList");
                });
#pragma warning restore 612, 618
        }
    }
}
